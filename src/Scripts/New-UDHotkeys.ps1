<#
.SYNOPSIS
    Calendar component.
.DESCRIPTION
    Allows to show a calendar, with both "onClickDay" and "onChange" events. Also supports Get-UDElement, and the easy mode Get-UDCalElement which retuns a preformatted DateTime object.
.PARAMETER Id
    An id for the component default value will be generated by new-guid.
.EXAMPLE
    PS C:\> <example usage>
    Explanation of what the example does
.INPUTS
    Inputs (if any)
.OUTPUTS
    Output (if any)
.NOTES
    General notes
#>
function New-UDHotkeys {
    [CmdletBinding(DefaultParameterSetName = "Global")]
    param(
        [Parameter()]
        [string]$Id = ([Guid]::NewGuid()),
        [Parameter()]
        [scriptblock]$hotKeys,
        [Parameter(
            ParameterSetName = "Content")]
        [scriptblock]$Content
    )
    Begin {
        $keymap = @{} 
        $handlers = @{}
        if ($null -eq $Content) {
            $isGlobal = $true
        } 
        else {
            $isGlobal = $false
        }
    }

    Process {
        $hotInvoked = $hotKeys.Invoke();

        $keymap = $hotInvoked.keyMap
        $handlers = $hotInvoked.action
        $names = $hotInvoked.name
        $isEndpoint = $hotInvoked.isEndpoint
        
    }

    End {
        @{
            # The AssetID of the main JS File
            assetId = $AssetId 
            # Tell UD this is a plugin
            isPlugin = $true 
            # This ID must be the same as the one used in the JavaScript to register the control with UD
            type = "ud-hotkeys"
            # An ID is mandatory 
            id = $Id
            keyMap = $keymap
            handlers = $handlers
            names = $names
            count = $names.count
            isEndpoint = $isEndpoint
            isGlobal = $isGlobal
            content = if($null -ne $content) {& $Content}
        }
    }
}

